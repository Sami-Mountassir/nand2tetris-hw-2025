// RAM512.hdl: 16-bit RAM with 512 registers (9-bit address)
// Built using 8 RAM64 chips (64 registers each)

CHIP RAM512 {
    IN in[16], load, address[9], clock;  // Declare clock here
    OUT out[16];

    PARTS:
    // Step 1: Split the 9-bit address into:
    // - Upper 3 bits (address[6..8]) to select the RAM64 chip
    // - Lower 6 bits (address[0..5]) for the internal RAM64 address
    DMux8Way(in=load, sel=address[6..8], a=load0, b=load1, c=load2, d=load3, e=load4, f=load5, g=load6, h=load7);

    // Step 2: Instantiate 8 RAM64 chips (WITHOUT EXPLICIT CLOCK)
    RAM64(in=in, load=load0, address=address[0..5], out=ram0);
    RAM64(in=in, load=load1, address=address[0..5], out=ram1);
    RAM64(in=in, load=load2, address=address[0..5], out=ram2);
    RAM64(in=in, load=load3, address=address[0..5], out=ram3);
    RAM64(in=in, load=load4, address=address[0..5], out=ram4);
    RAM64(in=in, load=load5, address=address[0..5], out=ram5);
    RAM64(in=in, load=load6, address=address[0..5], out=ram6);
    RAM64(in=in, load=load7, address=address[0..5], out=ram7);

    // Step 3: Select output from active RAM64 chip
    Mux8Way16(a=ram0, b=ram1, c=ram2, d=ram3, e=ram4, f=ram5, g=ram6, h=ram7, sel=address[6..8], out=out);
}