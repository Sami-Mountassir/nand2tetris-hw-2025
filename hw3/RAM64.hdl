// RAM64.hdl
CHIP RAM64 {
    IN in[16], load, address[6], clock;  // Clock declared here
    OUT out[16];

    PARTS:
    // Address splitting (upper 3 bits for RAM8 selection)
    DMux8Way(in=load, sel=address[3..5], a=load0, b=load1, c=load2, d=load3, e=load4, f=load5, g=load6, h=load7);

    // RAM8 instances (NO explicit clock connection needed)
    RAM8(in=in, load=load0, address=address[0..2], out=reg0);
    RAM8(in=in, load=load1, address=address[0..2], out=reg1);
    RAM8(in=in, load=load2, address=address[0..2], out=reg2);
    RAM8(in=in, load=load3, address=address[0..2], out=reg3);
    RAM8(in=in, load=load4, address=address[0..2], out=reg4);
    RAM8(in=in, load=load5, address=address[0..2], out=reg5);
    RAM8(in=in, load=load6, address=address[0..2], out=reg6);
    RAM8(in=in, load=load7, address=address[0..2], out=reg7);

    // Output multiplexer
    Mux8Way16(a=reg0, b=reg1, c=reg2, d=reg3, e=reg4, f=reg5, g=reg6, h=reg7, sel=address[3..5], out=out);
}